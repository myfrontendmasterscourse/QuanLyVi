#include "AccountManager.h"
#include <iostream>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <chrono>
#include <iomanip>
#include <filesystem>
#include <random>

namespace fs = std::filesystem;

AccountManager::AccountManager(const std::string& dataFilePath)
    : dataFilePath(dataFilePath) {
    // Tải dữ liệu nếu file tồn tại
    if (fs::exists(dataFilePath)) {
        loadFromFile();
    }
}

bool AccountManager::registerAccount(const User& user, const std::string& username, 
                                    const std::string& password, 
                                    AccountType type,
                                    bool isAutoGeneratedPassword) {
    // Check if username already exists
    if (usernameExists(username)) {
        std::cout << "Ten dang nhap da ton tai!" << std::endl;
        return false;
    }
    
    // Create and add new account (sử dụng mật khẩu dạng văn bản thuần)
    Account newAccount(user, username, password, type, isAutoGeneratedPassword);
    accounts.push_back(newAccount);
    
    // Lưu dữ liệu sau khi đăng ký
    saveToFile();
    
    std::cout << "Tai khoan da duoc tao thanh cong!" << std::endl;
    return true;
}

// Đăng ký tài khoản với mật khẩu tự động sinh
std::string AccountManager::registerAccountWithAutoPassword(const User& user, const std::string& username,
                                                      AccountType type) {
    // Sinh mật khẩu tự động (không dùng PasswordHasher)
    std::string autoPassword = generateRandomPassword();
    
    // Đăng ký tài khoản với mật khẩu tự sinh
    if (registerAccount(user, username, autoPassword, type, true)) {
        return autoPassword; // Trả về mật khẩu đã sinh để hiển thị cho người dùng
    }
    
    return ""; // Trường hợp đăng ký thất bại
}

// Phương thức sinh mật khẩu ngẫu nhiên (thay thế PasswordHasher::generatePassword)
std::string AccountManager::generateRandomPassword(size_t length) {
    // Sử dụng PasswordHasher để sinh mật khẩu
    return PasswordHasher::generatePassword(length);
}

// Cập nhật phương thức login với ít log hơn
bool AccountManager::login(const std::string& username, const std::string& password) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Ten dang nhap khong ton tai!" << std::endl;
        return false;
    }
    
    if (!account->isAccountActive()) {
        std::cout << "Tai khoan da bi khoa!" << std::endl;
        return false;
    }
    
    bool validPassword = account->validatePassword(password);
    
    if (!validPassword) {
        std::cout << "Mat khau khong chinh xac!" << std::endl;
        return false;
    }
    
    // Đăng nhập thành công
    currentLoggedInUser = username;
    
    if (account->isPasswordAutoGenerated()) {
        std::cout << "Ban dang su dung mat khau tu dong sinh. Vui long doi mat khau ngay!" << std::endl;
    }
    
    std::cout << "Dang nhap thanh cong!" << std::endl;
    return true;
}

// Đổi mật khẩu với xác thực
bool AccountManager::changePassword(const std::string& username, const std::string& oldPassword, 
                                  const std::string& newPassword) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Ten dang nhap khong ton tai!" << std::endl;
        return false;
    }
    
    if (!account->validatePassword(oldPassword)) {
        std::cout << "Mat khau cu khong chinh xac!" << std::endl;
        return false;
    }
    
    // Đổi mật khẩu (sử dụng mật khẩu dạng văn bản thuần)
    account->setPassword(newPassword, false); // false = không phải mật khẩu tự sinh
    saveToFile(); // Lưu thay đổi
    
    std::cout << "Da doi mat khau thanh cong!" << std::endl;
    return true;
}

// Đổi mật khẩu bắt buộc (không cần mật khẩu cũ)
bool AccountManager::forceChangePassword(const std::string& username, const std::string& newPassword) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Ten dang nhap khong ton tai!" << std::endl;
        return false;
    }
    
    // Đổi mật khẩu (sử dụng mật khẩu dạng văn bản thuần)
    account->setPassword(newPassword, false); // false = không phải mật khẩu tự sinh
    saveToFile(); // Lưu thay đổi
    
    std::cout << "Da doi mat khau thanh cong!" << std::endl;
    return true;
}

bool AccountManager::usernameExists(const std::string& username) const {
    return std::any_of(accounts.begin(), accounts.end(), 
                      [&username](const Account& acc) { 
                          return acc.getUsername() == username; 
                      });
}

// Phiên bản non-const (đã có)
Account* AccountManager::findAccount(const std::string& username) {
    for (auto& account : accounts) {
        if (account.getUsername() == username) {
            return &account;
        }
    }
    
    return nullptr;
}

// Phiên bản const mới
const Account* AccountManager::findAccount(const std::string& username) const {
    for (const auto& account : accounts) {
        if (account.getUsername() == username) {
            return &account;
        }
    }
    
    return nullptr;
}

void AccountManager::displayAllAccounts() const {
    if (accounts.empty()) {
        std::cout << "Khong co tai khoan nao!" << std::endl;
        return;
    }
    
    std::cout << "=== Danh sach tai khoan ===" << std::endl;
    for (const auto& account : accounts) {
        account.displayInfo();
        std::cout << "------------------------" << std::endl;
    }
}

bool AccountManager::loadFromFile(const std::string& filename) {
    std::string loadFilename = filename.empty() ? dataFilePath : filename;
    
    try {
        if (!fs::exists(loadFilename)) {
            std::cerr << "File khong ton tai: " << loadFilename << std::endl;
            return false;
        }
        
        std::ifstream file(loadFilename);
        if (!file.is_open()) {
            std::cerr << "Khong the mo file de doc: " << loadFilename << std::endl;
            return false;
        }
        
        size_t accountCount;
        file >> accountCount;
        file.ignore();
        
        accounts.clear();
        
        for (size_t i = 0; i < accountCount; ++i) {
            std::string accountStr;
            std::getline(file, accountStr);
            if (!accountStr.empty()) {
                Account account = Account::fromString(accountStr);
                accounts.push_back(account);
            }
        }
        
        file.close();
        
        return true;
    } catch (const std::exception& e) {
        std::cerr << "Loi khi tai du lieu: " << e.what() << std::endl;
        return false;
    }
}

bool AccountManager::saveToFile(const std::string& filename) const {
    std::string saveFilename = filename.empty() ? dataFilePath : filename;
    
    try {
        std::ofstream file(saveFilename);
        if (!file.is_open()) {
            std::cerr << "Khong the mo file de luu: " << saveFilename << std::endl;
            return false;
        }
        
        file << accounts.size() << std::endl;
        
        for (const auto& account : accounts) {
            file << account.toString() << std::endl;
        }
        
        file.close();
        
        std::cout << "Da luu du lieu vao: " << saveFilename << std::endl;
        return true;
    } catch (const std::exception& e) {
        std::cerr << "Loi khi luu du lieu: " << e.what() << std::endl;
        return false;
    }
}

bool AccountManager::backupData() const {
    fs::create_directories("backups");
    
    auto now = std::chrono::system_clock::now();
    auto timestamp = std::chrono::system_clock::to_time_t(now);
    std::stringstream ss;
    ss << "backups/accounts_" << std::put_time(std::localtime(&timestamp), "%Y%m%d_%H%M%S") << ".txt";
    std::string backupFilename = ss.str();
    
    bool success = saveToFile(backupFilename);
    
    if (success) {
        std::cout << "Da sao luu du lieu vao: " << backupFilename << std::endl;
        const_cast<AccountManager*>(this)->rotateBackups();
    }
    
    return success;
}

bool AccountManager::restoreFromBackup(const std::string& backupFilename) {
    if (!fs::exists(backupFilename)) {
        std::cout << "File sao luu khong ton tai!" << std::endl;
        return false;
    }
    
    backupData();
    
    bool success = loadFromFile(backupFilename);
    
    if (success) {
        saveToFile();
        std::cout << "Da phuc hoi du lieu tu: " << backupFilename << std::endl;
    } else {
        std::cout << "Khong the phuc hoi du lieu!" << std::endl;
    }
    
    return success;
}

void AccountManager::displayBackups() const {
    auto backups = listBackups();
    
    if (backups.empty()) {
        std::cout << "Khong co ban sao luu nao!" << std::endl;
        return;
    }
    
    std::cout << "=== Danh sach ban sao luu ===" << std::endl;
    for (size_t i = 0; i < backups.size(); ++i) {
        std::cout << i + 1 << ". " << backups[i] << std::endl;
    }
}

std::vector<std::string> AccountManager::listBackups() const {
    std::vector<std::string> backupFiles;
    
    if (!fs::exists("backups")) {
        return backupFiles;
    }
    
    for (const auto& entry : fs::directory_iterator("backups")) {
        if (entry.is_regular_file() && entry.path().extension() == ".txt") {
            backupFiles.push_back(entry.path().string());
        }
    }
    
    std::sort(backupFiles.begin(), backupFiles.end(), std::greater<>());
    
    return backupFiles;
}

void AccountManager::rotateBackups(int keepCount) {
    auto backupFiles = listBackups();
    
    if (backupFiles.size() > keepCount) {
        for (size_t i = keepCount; i < backupFiles.size(); ++i) {
            fs::remove(backupFiles[i]);
            std::cout << "Da xoa ban sao luu cu: " << backupFiles[i] << std::endl;
        }
    }
}

// Thêm các phương thức mới vào AccountManager.cpp

// Sửa phương thức hasPermission
bool AccountManager::hasPermission(PermissionType permission) const {
    if (!isLoggedIn()) {
        return false;
    }
    
    // Thay đổi kiểu từ Account* sang const Account*
    const Account* account = findAccount(currentLoggedInUser.value());
    if (!account) {
        return false;
    }
    
    return permissionManager.hasPermission(account->getAccountType(), permission);
}

// Sửa phương thức getCurrentUserType
AccountType AccountManager::getCurrentUserType() const {
    if (!isLoggedIn()) {
        // Trả về REGULAR làm mặc định
        return AccountType::REGULAR;
    }
    
    // Thay đổi kiểu từ Account* sang const Account*
    const Account* account = findAccount(currentLoggedInUser.value());
    if (!account) {
        return AccountType::REGULAR;
    }
    
    return account->getAccountType();
}

// Lấy tài khoản đang đăng nhập
const Account* AccountManager::getCurrentAccount() const {
    if (!isLoggedIn()) {
        return nullptr;
    }
    
    return findAccount(currentLoggedInUser.value());
}

// Cập nhật họ tên
bool AccountManager::updateUserFullName(const std::string& username, const std::string& newFullName) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return false;
    }
    
    // Kiểm tra quyền
    bool canEdit = false;
    if (isLoggedIn()) {
        if (getCurrentUser() == username && hasPermission(PermissionType::EDIT_OWN_FULLNAME)) {
            canEdit = true; // Người dùng sửa thông tin của chính mình
        } else if (getCurrentUser() != username && hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
            canEdit = true; // Người quản lý sửa thông tin của người khác
        }
    }
    
    if (!canEdit) {
        std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
        return false;
    }
    
    account->getUser().setFullName(newFullName);
    saveToFile();
    
    std::cout << "Da cap nhat ho ten thanh cong!" << std::endl;
    return true;
}

// Cập nhật ngày sinh
bool AccountManager::updateUserDateOfBirth(const std::string& username, const std::string& newDOB) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return false;
    }
    
    // Kiểm tra quyền
    bool canEdit = false;
    if (isLoggedIn()) {
        if (getCurrentUser() == username && hasPermission(PermissionType::EDIT_OWN_DOB)) {
            canEdit = true; // Người dùng sửa thông tin của chính mình
        } else if (getCurrentUser() != username && hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
            canEdit = true; // Người quản lý sửa thông tin của người khác
        }
    }
    
    if (!canEdit) {
        std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
        return false;
    }
    
    account->getUser().setDateOfBirth(newDOB);
    saveToFile();
    
    std::cout << "Da cap nhat ngay sinh thanh cong!" << std::endl;
    return true;
}

// Cập nhật địa chỉ
bool AccountManager::updateUserAddress(const std::string& username, const std::string& newAddress) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return false;
    }
    
    // Kiểm tra quyền
    bool canEdit = false;
    if (isLoggedIn()) {
        if (getCurrentUser() == username && hasPermission(PermissionType::EDIT_OWN_ADDRESS)) {
            canEdit = true; // Người dùng sửa thông tin của chính mình
        } else if (getCurrentUser() != username && hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
            canEdit = true; // Người quản lý sửa thông tin của người khác
        }
    }
    
    if (!canEdit) {
        std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
        return false;
    }
    
    account->getUser().setAddress(newAddress);
    saveToFile();
    
    std::cout << "Da cap nhat dia chi thanh cong!" << std::endl;
    return true;
}

// Cập nhật số điện thoại
bool AccountManager::updateUserPhone(const std::string& username, const std::string& newPhone) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return false;
    }
    
    // Kiểm tra quyền
    bool canEdit = false;
    if (isLoggedIn()) {
        if (getCurrentUser() == username && hasPermission(PermissionType::EDIT_OWN_PHONE)) {
            canEdit = true; // Người dùng sửa thông tin của chính mình
        } else if (getCurrentUser() != username && hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
            canEdit = true; // Người quản lý sửa thông tin của người khác
        }
    }
    
    if (!canEdit) {
        std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
        return false;
    }
    
    account->getUser().setPhoneNumber(newPhone);
    saveToFile();
    
    std::cout << "Da cap nhat so dien thoai thanh cong!" << std::endl;
    return true;
}

// Cập nhật email
bool AccountManager::updateUserEmail(const std::string& username, const std::string& newEmail) {
    Account* account = findAccount(username);
    
    if (!account) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return false;
    }
    
    // Kiểm tra quyền
    bool canEdit = false;
    if (isLoggedIn()) {
        if (getCurrentUser() == username && hasPermission(PermissionType::EDIT_OWN_EMAIL)) {
            canEdit = true; // Người dùng sửa thông tin của chính mình
        } else if (getCurrentUser() != username && hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
            canEdit = true; // Người quản lý sửa thông tin của người khác
        }
    }
    
    if (!canEdit) {
        std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
        return false;
    }
    
    account->getUser().setEmail(newEmail);
    saveToFile();
    
    std::cout << "Da cap nhat email thanh cong!" << std::endl;
    return true;
}

// Hiển thị thông tin tài khoản của người dùng đang đăng nhập
void AccountManager::displayOwnAccount() const {
    if (!isLoggedIn()) {
        std::cout << "Ban chua dang nhap!" << std::endl;
        return;
    }
    
    const Account* account = getCurrentAccount();
    if (account) {
        account->displayInfo();
    }
}

// Hiển thị quyền của loại tài khoản
void AccountManager::displayPermissions(AccountType accountType) const {
    permissionManager.displayPermissions(accountType);
}