#include "Account.h"
#include <iostream>
#include <ctime>
#include <iomanip>
#include <sstream>
#include <vector>

Account::Account(const User& user, const std::string& username, 
                 const std::string& password, AccountType type,
                 bool isAutoGeneratedPassword)
    : user(user), username(username), 
      passwordHash(PasswordHasher::hashPassword(password)), // Sử dụng hàm băm
      creationDate(getCurrentDate()), isActive(true), type(type),
      isAutoGeneratedPassword(isAutoGeneratedPassword) {}

std::string Account::getUsername() const {
    return username;
}

bool Account::validatePassword(const std::string& passwordAttempt) const {
    // Sử dụng PasswordHasher để xác minh mật khẩu
    return PasswordHasher::verifyPassword(passwordAttempt, passwordHash);
}

bool Account::isAccountActive() const {
    return isActive;
}

AccountType Account::getAccountType() const {
    return type;
}

bool Account::isPasswordAutoGenerated() const {
    return isAutoGeneratedPassword;
}

void Account::setPassword(const std::string& newPassword, bool isAutoGenerated) {
    // Băm mật khẩu mới
    passwordHash = PasswordHasher::hashPassword(newPassword);
    isAutoGeneratedPassword = isAutoGenerated;
}

void Account::setActive(bool active) {
    isActive = active;
}

void Account::setType(AccountType type) {
    this->type = type;
}

const User& Account::getUser() const {
    return user;
}

User& Account::getUser() {
    return user;
}

void Account::displayInfo() const {
    std::cout << "=== Thong tin tai khoan ===" << std::endl;
    std::cout << "Ten dang nhap: " << username << std::endl;
    std::cout << "Ngay tao: " << creationDate << std::endl;
    std::cout << "Trang thai: " << (isActive ? "Hoat dong" : "Da khoa") << std::endl;
    std::cout << "Loai tai khoan: " << (type == AccountType::ADMIN ? "Quan tri vien" : "Nguoi dung thuong") << std::endl;
    std::cout << "Mat khau: " << (isAutoGeneratedPassword ? "Tu dong sinh" : "Do nguoi dung dat") << std::endl;
    std::cout << "\n=== Thong tin nguoi dung ===" << std::endl;
    user.displayInfo();
}

std::string Account::getCurrentDate() {
    auto now = std::time(nullptr);
    auto tm = *std::localtime(&now);
    
    std::ostringstream oss;
    oss << std::put_time(&tm, "%d/%m/%Y %H:%M:%S");
    return oss.str();
}

// Chuyển đổi account thành chuỗi (format để lưu vào file)
std::string Account::toString() const {
    std::stringstream ss;
    ss << username << "||" 
       << PasswordHasher::toString(passwordHash) << "||" // Lưu mật khẩu đã băm và salt
       << creationDate << "||" 
       << (isActive ? "1" : "0") << "||" 
       << (type == AccountType::ADMIN ? "ADMIN" : "REGULAR") << "||"
       << (isAutoGeneratedPassword ? "1" : "0") << "||"
       << user.getFullName() << "||" 
       << user.getDateOfBirth() << "||" 
       << user.getAddress() << "||" 
       << user.getPhoneNumber() << "||" 
       << user.getEmail();
    return ss.str();
}

// Tạo account từ chuỗi - Cải tiến để xử lý định dạng "||" chính xác
Account Account::fromString(const std::string& str) {
    // Dùng cách phân tích khác để xử lý đúng định dạng "||"
    std::vector<std::string> parts;
    std::string part;
    std::stringstream ss(str);
    
    // Đọc từng phần được ngăn cách bởi "||"
    std::string temp;
    while (std::getline(ss, temp, '|')) {
        // Bỏ qua các '|' dư thừa
        if (!temp.empty()) {
            parts.push_back(temp);
        }
    }
    
    // Đảm bảo có đủ phần
    if (parts.size() < 11) {
        std::cerr << "Loi: Chuoi khong du du lieu: " << str << std::endl;
        // Trả về account mặc định trong trường hợp lỗi
        return Account();
    }
    
    // Phân tích các thành phần
    User user;
    user.setFullName(parts[6]);
    user.setDateOfBirth(parts[7]);
    user.setAddress(parts[8]);
    user.setPhoneNumber(parts[9]);
    user.setEmail(parts[10]);
    
    Account account;
    account.user = user;
    account.username = parts[0];
    
    // Phân tích chuỗi mật khẩu đã băm và salt
    account.passwordHash = PasswordHasher::fromString(parts[1]);
    
    account.creationDate = parts[2];
    account.isActive = (parts[3] == "1");
    account.type = (parts[4] == "ADMIN") ? AccountType::ADMIN : AccountType::REGULAR;
    account.isAutoGeneratedPassword = (parts[5] == "1");
    
    return account;
}