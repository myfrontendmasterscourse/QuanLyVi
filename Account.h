#ifndef ACCOUNT_H
#define ACCOUNT_H

#include "User.h"
#include <string>
#include <ctime>

enum class AccountType {
    REGULAR,
    ADMIN
};

class Account {
private:
    User user;
    std::string username;
    std::string password; // Chuyển về lưu mật khẩu dạng thường
    std::string creationDate;
    bool isActive;
    AccountType type;
    bool isAutoGeneratedPassword; 
    
public:
    // Constructors
    Account() = default;
    Account(const User& user, const std::string& username, 
            const std::string& password, AccountType type = AccountType::REGULAR,
            bool isAutoGeneratedPassword = false);
    
    // Account methods
    std::string getUsername() const;
    bool validatePassword(const std::string& passwordAttempt) const;
    bool isAccountActive() const;
    AccountType getAccountType() const;
    bool isPasswordAutoGenerated() const;
    
    // Change account settings
    void setPassword(const std::string& newPassword, bool isAutoGenerated = false);
    void setActive(bool active);
    void setType(AccountType type);
    
    // Get user information
    const User& getUser() const;
    User& getUser();
    
    // Chuyển đổi account thành chuỗi và từ chuỗi
    std::string toString() const;
    static Account fromString(const std::string& str);
    
    // Display account information
    void displayInfo() const;
    
    // Get current date as string (helper method)
    static std::string getCurrentDate();
};

#endif // ACCOUNT_H