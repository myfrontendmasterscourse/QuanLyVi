#include <iostream>
#include <string>
#include <limits>
#include "AccountManager.h"
#include "WalletManager.h"


void clearInputBuffer() {
    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

User inputUserInfo() {
    User user;
    std::string fullName, dateOfBirth, address, phoneNumber, email;
    
    std::cout << "=== Nhap thong tin nguoi dung ===" << std::endl;
    
    std::cout << "Ho va ten: ";
    std::getline(std::cin, fullName);
    user.setFullName(fullName);
    
    std::cout << "Ngay sinh (DD/MM/YYYY): ";
    std::getline(std::cin, dateOfBirth);
    user.setDateOfBirth(dateOfBirth);
    
    std::cout << "Dia chi: ";
    std::getline(std::cin, address);
    user.setAddress(address);
    
    std::cout << "So dien thoai: ";
    std::getline(std::cin, phoneNumber);
    user.setPhoneNumber(phoneNumber);
    
    std::cout << "Email: ";
    std::getline(std::cin, email);
    user.setEmail(email);
    
    return user;
}

void registerNewAccount(AccountManager& manager, WalletManager& walletManager) {
    std::string username, password;
    AccountType type = AccountType::REGULAR;
    char choice;
    
    // Nhập thông tin người dùng
    User newUser = inputUserInfo();
    
    // Nhập thông tin tài khoản
    std::cout << "\n=== Tao tai khoan ===" << std::endl;
    
    std::cout << "Ten dang nhap: ";
    std::getline(std::cin, username);
    
    std::cout << "Tu tao mat khau hay sinh mat khau tu dong? (T/A): ";
    std::cin >> choice;
    clearInputBuffer();
    
    if (choice == 'A' || choice == 'a') {
        // Sinh mật khẩu tự động
        std::string autoPassword = manager.registerAccountWithAutoPassword(newUser, username, type);
        if (!autoPassword.empty()) {
            std::cout << "Mat khau tu dong sinh: " << autoPassword << std::endl;
            std::cout << "Vui long thong bao cho nguoi dung mat khau nay." << std::endl;
        }
    } else {
        // Người dùng tự nhập mật khẩu
        std::cout << "Mat khau: ";
        std::getline(std::cin, password);
        
        std::cout << "Loai tai khoan (A - Admin, U - User thuong): ";
        std::cin >> choice;
        clearInputBuffer();
        
        if (choice == 'A' || choice == 'a') {
            type = AccountType::ADMIN;
        }
        
        // Đăng ký tài khoản
        manager.registerAccount(newUser, username, password, type, false);
    }
    
    walletManager.addWalletToFile(username, 0);
}

void loginAccount(AccountManager& manager) {
    std::string username, password;
    
    std::cout << "=== Dang nhap ===" << std::endl;
    std::cout << "Ten dang nhap: ";
    std::getline(std::cin, username);
    
    std::cout << "Mat khau: ";
    std::getline(std::cin, password);
    
    if (manager.login(username, password)) {
        std::cout << "Dang nhap thanh cong!" << std::endl;
        
        // Kiểm tra xem có phải mật khẩu tự sinh không
        Account* account = manager.findAccount(username);
        if (account && account->isPasswordAutoGenerated()) {
            std::cout << "Ban can phai doi mat khau vi dang su dung mat khau tu dong sinh." << std::endl;
            
            std::string newPassword, confirmPassword;
            do {
                std::cout << "Nhap mat khau moi: ";
                std::getline(std::cin, newPassword);
                
                std::cout << "Xac nhan mat khau moi: ";
                std::getline(std::cin, confirmPassword);
                
                if (newPassword != confirmPassword) {
                    std::cout << "Mat khau xac nhan khong khop! Vui long thu lai." << std::endl;
                }
            } while (newPassword != confirmPassword);
            
            manager.forceChangePassword(username, newPassword);
        }
    }
}

void changePassword(AccountManager& manager) {
    if (!manager.isLoggedIn()) {
        std::cout << "Ban chua dang nhap! Vui long dang nhap truoc." << std::endl;
        return;
    }
    
    std::string currentPassword, newPassword, confirmPassword;
    std::string username = manager.getCurrentUser();
    
    std::cout << "=== Doi mat khau ===" << std::endl;
    std::cout << "Nhap mat khau hien tai: ";
    std::getline(std::cin, currentPassword);
    
    std::cout << "Nhap mat khau moi: ";
    std::getline(std::cin, newPassword);
    
    std::cout << "Xac nhan mat khau moi: ";
    std::getline(std::cin, confirmPassword);
    
    if (newPassword != confirmPassword) {
        std::cout << "Mat khau xac nhan khong khop!" << std::endl;
        return;
    }
    
    manager.changePassword(username, currentPassword, newPassword);
}

void backupData(AccountManager& manager) {
    manager.backupData();
}

void restoreData(AccountManager& manager) {
    manager.displayBackups();
    
    std::vector<std::string> backups = manager.listBackups();
    if (backups.empty()) {
        return;
    }
    
    int choice;
    std::cout << "Chon ban sao luu de phuc hoi (1-" << backups.size() << "): ";
    std::cin >> choice;
    clearInputBuffer();
    
    if (choice < 1 || choice > backups.size()) {
        std::cout << "Lua chon khong hop le!" << std::endl;
        return;
    }
    
    manager.restoreFromBackup(backups[choice - 1]);
}

void logout(AccountManager& manager) {
    if (manager.isLoggedIn()) {
        manager.logout();
        std::cout << "Da dang xuat thanh cong!" << std::endl;
    } else {
        std::cout << "Ban chua dang nhap!" << std::endl;
    }
}

// Menu chỉnh sửa thông tin cá nhân chi tiết
void editUserInfoMenu(AccountManager& manager) {
    if (!manager.isLoggedIn()) {
        std::cout << "Ban chua dang nhap!" << std::endl;
        return;
    }
    
    std::string username = manager.getCurrentUser();
    int choice;
    
    do {
        std::cout << "\n=== CHINH SUA THONG TIN CA NHAN ===" << std::endl;
        std::cout << "1. Chinh sua ho ten" << std::endl;
        std::cout << "2. Chinh sua ngay sinh" << std::endl;
        std::cout << "3. Chinh sua dia chi" << std::endl;
        std::cout << "4. Chinh sua so dien thoai" << std::endl;
        std::cout << "5. Chinh sua email" << std::endl;
        std::cout << "0. Quay lai" << std::endl;
        
        std::cout << "Lua chon cua ban: ";
        std::cin >> choice;
        clearInputBuffer();
        
        std::string newValue;
        
        switch (choice) {
            case 1: // Sửa họ tên
                if (manager.hasPermission(PermissionType::EDIT_OWN_FULLNAME)) {
                    std::cout << "Nhap ho ten moi: ";
                    std::getline(std::cin, newValue);
                    manager.updateUserFullName(username, newValue);
                } else {
                    std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
                }
                break;
                
            case 2: // Sửa ngày sinh
                if (manager.hasPermission(PermissionType::EDIT_OWN_DOB)) {
                    std::cout << "Nhap ngay sinh moi (DD/MM/YYYY): ";
                    std::getline(std::cin, newValue);
                    manager.updateUserDateOfBirth(username, newValue);
                } else {
                    std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
                }
                break;
                
            case 3: // Sửa địa chỉ
                if (manager.hasPermission(PermissionType::EDIT_OWN_ADDRESS)) {
                    std::cout << "Nhap dia chi moi: ";
                    std::getline(std::cin, newValue);
                    manager.updateUserAddress(username, newValue);
                } else {
                    std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
                }
                break;
                
            case 4: // Sửa số điện thoại
                if (manager.hasPermission(PermissionType::EDIT_OWN_PHONE)) {
                    std::cout << "Nhap so dien thoai moi: ";
                    std::getline(std::cin, newValue);
                    manager.updateUserPhone(username, newValue);
                } else {
                    std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
                }
                break;
                
            case 5: // Sửa email
                if (manager.hasPermission(PermissionType::EDIT_OWN_EMAIL)) {
                    std::cout << "Nhap email moi: ";
                    std::getline(std::cin, newValue);
                    manager.updateUserEmail(username, newValue);
                } else {
                    std::cout << "Ban khong co quyen sua thong tin nay!" << std::endl;
                }
                break;
                
            case 0: // Quay lại
                break;
                
            default:
                std::cout << "Lua chon khong hop le!" << std::endl;
        }
    } while (choice != 0);
}

// Menu làm hộ (dành cho người quản lý)
void editOtherAccountMenu(AccountManager& manager) {
    if (!manager.isLoggedIn() || !manager.hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
        std::cout << "Ban khong co quyen chinh sua thong tin tai khoan khac!" << std::endl;
        return;
    }
    
    std::string username;
    std::cout << "Nhap ten dang nhap cua tai khoan can chinh sua: ";
    std::getline(std::cin, username);
    
    if (!manager.usernameExists(username)) {
        std::cout << "Khong tim thay tai khoan!" << std::endl;
        return;
    }
    
    // Không thể chỉnh sửa tên đăng nhập
    std::cout << "Chu y: Khong the thay doi ten dang nhap '" << username << "'" << std::endl;
    
    int choice;
    do {
        std::cout << "\n=== CHINH SUA THONG TIN TAI KHOAN " << username << " ===" << std::endl;
        std::cout << "1. Chinh sua ho ten" << std::endl;
        std::cout << "2. Chinh sua ngay sinh" << std::endl;
        std::cout << "3. Chinh sua dia chi" << std::endl;
        std::cout << "4. Chinh sua so dien thoai" << std::endl;
        std::cout << "5. Chinh sua email" << std::endl;
        std::cout << "6. Dat lai mat khau" << std::endl;
        std::cout << "0. Quay lai" << std::endl;
        
        std::cout << "Lua chon cua ban: ";
        std::cin >> choice;
        clearInputBuffer();
        
        std::string newValue;
        
        switch (choice) {
            case 1: // Sửa họ tên
                std::cout << "Nhap ho ten moi: ";
                std::getline(std::cin, newValue);
                manager.updateUserFullName(username, newValue);
                break;
                
            case 2: // Sửa ngày sinh
                std::cout << "Nhap ngay sinh moi (DD/MM/YYYY): ";
                std::getline(std::cin, newValue);
                manager.updateUserDateOfBirth(username, newValue);
                break;
                
            case 3: // Sửa địa chỉ
                std::cout << "Nhap dia chi moi: ";
                std::getline(std::cin, newValue);
                manager.updateUserAddress(username, newValue);
                break;
                
            case 4: // Sửa số điện thoại
                std::cout << "Nhap so dien thoai moi: ";
                std::getline(std::cin, newValue);
                manager.updateUserPhone(username, newValue);
                break;
                
            case 5: // Sửa email
                std::cout << "Nhap email moi: ";
                std::getline(std::cin, newValue);
                manager.updateUserEmail(username, newValue);
                break;
                
            case 6: // Đặt lại mật khẩu
                std::cout << "Nhap mat khau moi: ";
                std::getline(std::cin, newValue);
                manager.forceChangePassword(username, newValue);
                break;
                
            case 0: // Quay lại
                break;
                
            default:
                std::cout << "Lua chon khong hop le!" << std::endl;
        }
    } while (choice != 0);
}

// Chức năng người dùng thông thường
void userFeatures(AccountManager& manager) {
    if (!manager.isLoggedIn()) {
        std::cout << "Ban chua dang nhap!" << std::endl;
        return;
    }
    
    int choice;
    do {
        std::cout << "\n=== CHUC NANG NGUOI DUNG ===" << std::endl;
        std::cout << "1. Xem thong tin tai khoan" << std::endl;
        std::cout << "2. Chinh sua thong tin ca nhan" << std::endl;
        std::cout << "3. Doi mat khau" << std::endl;
        std::cout << "0. Quay lai" << std::endl;
        
        std::cout << "Lua chon cua ban: ";
        std::cin >> choice;
        clearInputBuffer();
        
        switch (choice) {
            case 1: // Xem thông tin tài khoản
                if (manager.hasPermission(PermissionType::VIEW_OWN_ACCOUNT)) {
                    manager.displayOwnAccount();
                } else {
                    std::cout << "Ban khong co quyen xem thong tin tai khoan!" << std::endl;
                }
                break;
                
            case 2: // Chỉnh sửa thông tin cá nhân
                editUserInfoMenu(manager);
                break;
                
            case 3: // Đổi mật khẩu
                if (manager.hasPermission(PermissionType::CHANGE_OWN_PASSWORD)) {
                    changePassword(manager);
                } else {
                    std::cout << "Ban khong co quyen doi mat khau!" << std::endl;
                }
                break;
                
            case 0: // Quay lại
                break;
                
            default:
                std::cout << "Lua chon khong hop le!" << std::endl;
        }
    } while (choice != 0);
}

// Chức năng người quản lý
void managerFeatures(AccountManager& manager, WalletManager& walletManager) {
    if (!manager.isLoggedIn() || manager.getCurrentUserType() != AccountType::ADMIN) {
        std::cout << "Ban khong co quyen truy cap chuc nang quan ly!" << std::endl;
        return;
    }
    
    int choice;
    do {
        std::cout << "\n=== CHUC NANG QUAN LY ===" << std::endl;
        std::cout << "1. Xem danh sach nhom nguoi dung" << std::endl;
        std::cout << "2. Tao tai khoan moi" << std::endl;
        std::cout << "3. Chinh sua thong tin tai khoan (lam ho)" << std::endl;
        std::cout << "4. Sao luu du lieu" << std::endl;
        std::cout << "5. Phuc hoi du lieu" << std::endl;
        std::cout << "0. Quay lai" << std::endl;
        
        std::cout << "Lua chon cua ban: ";
        std::cin >> choice;
        clearInputBuffer();
        
        switch (choice) {
            case 1: // Xem danh sách nhóm người dùng
                if (manager.hasPermission(PermissionType::VIEW_GROUP_LIST)) {
                    manager.displayAllAccounts();
                } else {
                    std::cout << "Ban khong co quyen xem danh sach nhom!" << std::endl;
                }
                break;
                
            case 2: // Tạo tài khoản mới
                if (manager.hasPermission(PermissionType::CREATE_ACCOUNT)) {
                    registerNewAccount(manager, walletManager);
                } else {
                    std::cout << "Ban khong co quyen tao tai khoan moi!" << std::endl;
                }
                break;
                
            case 3: // Chỉnh sửa thông tin tài khoản (làm hộ)
                if (manager.hasPermission(PermissionType::EDIT_OTHER_ACCOUNT)) {
                    editOtherAccountMenu(manager);
                } else {
                    std::cout << "Ban khong co quyen chinh sua thong tin tai khoan khac!" << std::endl;
                }
                break;
                
            case 4: // Sao lưu dữ liệu
                if (manager.hasPermission(PermissionType::BACKUP_DATA)) {
                    manager.backupData();
                } else {
                    std::cout << "Ban khong co quyen sao luu du lieu!" << std::endl;
                }
                break;
                
            case 5: // Phục hồi dữ liệu
                if (manager.hasPermission(PermissionType::RESTORE_DATA)) {
                    manager.displayBackups();
                    
                    std::vector<std::string> backups = manager.listBackups();
                    if (backups.empty()) {
                        break;
                    }
                    
                    int backupChoice;
                    std::cout << "Chon ban sao luu de phuc hoi (1-" << backups.size() << "): ";
                    std::cin >> backupChoice;
                    clearInputBuffer();
                    
                    if (backupChoice < 1 || backupChoice > backups.size()) {
                        std::cout << "Lua chon khong hop le!" << std::endl;
                    } else {
                        manager.restoreFromBackup(backups[backupChoice - 1]);
                    }
                } else {
                    std::cout << "Ban khong co quyen phuc hoi du lieu!" << std::endl;
                }
                break;
                
            case 0: // Quay lại
                break;
                
            default:
                std::cout << "Lua chon khong hop le!" << std::endl;
        }
    } while (choice != 0);
}

// Menu chính
void showMainMenu(bool isLoggedIn, AccountType userType) {
    std::cout << "\nMENU CHINH:" << std::endl;
    
    if (!isLoggedIn) {
        std::cout << "1. Dang ky tai khoan" << std::endl;
        std::cout << "2. Dang nhap" << std::endl;
    } else {
        std::cout << "1. Chuc nang nguoi dung" << std::endl;
        
        if (userType == AccountType::ADMIN) {
            std::cout << "2. Chuc nang quan ly" << std::endl;
        }
        
        std::cout << "3. Dang xuat" << std::endl;
        std::cout << "4. Chuc nang vi" << std::endl;
    }
    
    std::cout << "0. Thoat" << std::endl;
}

void printTransactionHistoryByUsername(WalletManager& walletManager, const std::string& username) {
        std::vector<std::string> history = walletManager.getTransactionHistoryByUsername(username);
        if (history.empty()) {
            std::cout << "\n⚠️  Không có giao dịch nào cho người dùng này.\n";
            return;
        }
        std::cout << "\n=== LỊCH SỬ GIAO DỊCH CỦA " << username << " ===" << std::endl;
        for (const auto& line : history) {
            std::cout << line << std::endl;
        }
    }


void walletServices(AccountManager& manager, WalletManager& walletManager) {
    int choice;
    do {
        std::cout << "\n=== CHUC NANG VI ===" << std::endl;
        std::cout << "1. Xem so du vi" << std::endl;
        std::cout << "2. Chuyen diem" << std::endl;
        std::cout << "3. Lich su giao dich" << std::endl;
        std::cout << "0. Quay lai" << std::endl;
        
        std::cout << "Lua chon cua ban: ";
        std::cin >> choice;
        clearInputBuffer();
        
        switch (choice) {
            case 1:
             std::cout << "So du hien tai cua ban: " << walletManager.getBalanceByUsername(manager.getCurrentUser()) << " diem.\n";
            break;
            case 2:
                {
                    std::string toUsername;
                    int amount;

                    std::cout << "=== Nhap thong tin chuyen diem ===" << std::endl;

                    std::cout << "Nhap ten nguoi nhan: ";
                    std::getline(std::cin, toUsername);

                    std::cout << "Nhap so diem can chuyen: ";
                    std::cin >> amount;
                    clearInputBuffer();

                    std::string fromUsername = manager.getCurrentUser();
                    walletManager.transferPointsFromUserToUser(fromUsername, toUsername, amount);
                    break;
                }
            case 3:
                printTransactionHistoryByUsername(walletManager, manager.getCurrentUser());
                break;
            case 0:
                break;
                
            default:
                std::cout << "Lua chon khong hop le!" << std::endl;
        }
    } while (choice != 0);
}

// Chương trình chính
int main() {
    std::cout << "CHUONG TRINH QUAN LY TAI KHOAN" << std::endl;
    std::cout << "--------------------------------" << std::endl;
    
    AccountManager manager("accounts.txt");
    WalletManager walletManager("wallets.txt");

    
    int choice;
    do {
        bool isLoggedIn = manager.isLoggedIn();
        AccountType userType = manager.getCurrentUserType();
        
        showMainMenu(isLoggedIn, userType);
        std::cout << "Lua chon cua ban: ";
        
        std::cin >> choice;
        clearInputBuffer();
        
        if (!isLoggedIn) {
            // Menu khi chưa đăng nhập
            switch (choice) {
                case 1: // Đăng ký
                    registerNewAccount(manager, walletManager);
                    break;
                case 2: // Đăng nhập
                    loginAccount(manager);
                    break;
                case 0: // Thoát
                    std::cout << "Tam biet!" << std::endl;
                    break;
                default:
                    std::cout << "Lua chon khong hop le!" << std::endl;
            }
        } else {
            // Menu khi đã đăng nhập
            switch (choice) {
                case 1: // Chức năng người dùng thông thường
                    userFeatures(manager);
                    break;
                case 2: // Chức năng quản lý
                    if (userType == AccountType::ADMIN) {
                        managerFeatures(manager, walletManager);
                    } else {
                        std::cout << "Lua chon khong hop le!" << std::endl;
                    }
                    break;
                case 3: // Đăng xuất
                    manager.logout();
                    std::cout << "Da dang xuat thanh cong!" << std::endl;
                    break;
                case 4: {
                    walletServices(manager, walletManager);
                    break;
                }
                case 0: // Thoát
                    std::cout << "Tam biet!" << std::endl;
                    break;
                default:
                    std::cout << "Lua chon khong hop le!" << std::endl;
            }
        }
    } while (choice != 0);
    
    return 0;
}