#ifndef ACCOUNT_MANAGER_H
#define ACCOUNT_MANAGER_H

#include "Account.h"
#include <vector>
#include <string>
#include <memory>
#include <filesystem>
#include <optional>

class AccountManager {
private:
    std::vector<Account> accounts;
    std::string dataFilePath;
    std::optional<std::string> currentLoggedInUser; // Lưu trữ tên người dùng đang đăng nhập
    std::string generateRandomPassword(size_t length = 10); // Tạo mật khẩu ngẫu nhiên

public:
    AccountManager(const std::string& dataFilePath = "accounts.txt");
    
    // Account registration
    bool registerAccount(const User& user, const std::string& username, 
                        const std::string& password, 
                        AccountType type = AccountType::REGULAR,
                        bool isAutoGeneratedPassword = false);
    
    // Đăng ký với mật khẩu tự động sinh
    std::string registerAccountWithAutoPassword(const User& user, const std::string& username,
                                           AccountType type = AccountType::REGULAR);
                                           
    // Đăng nhập và đổi mật khẩu
    bool login(const std::string& username, const std::string& password);
    bool changePassword(const std::string& username, const std::string& oldPassword, 
                      const std::string& newPassword);
    bool forceChangePassword(const std::string& username, const std::string& newPassword);
    
    // Kiểm tra đang đăng nhập
    bool isLoggedIn() const { return currentLoggedInUser.has_value(); }
    std::string getCurrentUser() const { return currentLoggedInUser.value_or(""); }
    void logout() { currentLoggedInUser.reset(); }
    
    // Check if username already exists
    bool usernameExists(const std::string& username) const;
    
    // Find account by username
    Account* findAccount(const std::string& username);
    
    // Display all accounts
    void displayAllAccounts() const;
    
    // Save accounts to file
    bool saveToFile(const std::string& filename = "") const;
    
    // Load accounts from file
    bool loadFromFile(const std::string& filename = "");
    
    // Backup functionality
    bool backupData() const;
    bool restoreFromBackup(const std::string& backupFilename);
    std::vector<std::string> listBackups() const;
    void rotateBackups(int keepCount = 5);
    void displayBackups() const;
};

#endif // ACCOUNT_MANAGER_H