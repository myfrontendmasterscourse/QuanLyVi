#ifndef ACCOUNT_MANAGER_H
#define ACCOUNT_MANAGER_H

#include "Account.h"
#include "Permission.h"
#include <vector>
#include <string>
#include <filesystem>
#include <optional>

class AccountManager {
private:
    std::vector<Account> accounts;
    std::string dataFilePath;
    std::optional<std::string> currentLoggedInUser;
    PermissionManager permissionManager;
    
    // Phương thức sinh mật khẩu ngẫu nhiên
    std::string generateRandomPassword(size_t length = 10);
    
public:
    AccountManager(const std::string& dataFilePath = "accounts.txt");
    
    // Đăng ký tài khoản
    bool registerAccount(const User& user, const std::string& username, 
                        const std::string& password, 
                        AccountType type = AccountType::REGULAR,
                        bool isAutoGeneratedPassword = false);
    
    // Đăng ký với mật khẩu tự động sinh
    std::string registerAccountWithAutoPassword(const User& user, const std::string& username,
                                           AccountType type = AccountType::REGULAR);
                                           
    // Đăng nhập và đổi mật khẩu
    bool login(const std::string& username, const std::string& password);
    bool changePassword(const std::string& username, const std::string& oldPassword, 
                      const std::string& newPassword);
    bool forceChangePassword(const std::string& username, const std::string& newPassword);
    
    // Kiểm tra đang đăng nhập
    bool isLoggedIn() const { return currentLoggedInUser.has_value(); }
    std::string getCurrentUser() const { return currentLoggedInUser.value_or(""); }
    void logout() { currentLoggedInUser.reset(); }
    
    // Phương thức kiểm tra quyền và lấy thông tin tài khoản đang đăng nhập
    bool hasPermission(PermissionType permission) const;
    AccountType getCurrentUserType() const;
    const Account* getCurrentAccount() const;
    
    // Cập nhật từng trường thông tin người dùng
    bool updateUserFullName(const std::string& username, const std::string& newFullName);
    bool updateUserDateOfBirth(const std::string& username, const std::string& newDOB);
    bool updateUserAddress(const std::string& username, const std::string& newAddress);
    bool updateUserPhone(const std::string& username, const std::string& newPhone);
    bool updateUserEmail(const std::string& username, const std::string& newEmail);
    
    // Cập nhật thông tin người dùng (tất cả các trường)
    bool updateUserInfo(const std::string& username, const User& newUserInfo);
    
    // Check if username exists
    bool usernameExists(const std::string& username) const;
    
    // Find account by username (cả hai phiên bản)
    Account* findAccount(const std::string& username);
    const Account* findAccount(const std::string& username) const;
    
    // Display all accounts (danh sách nhóm)
    void displayAllAccounts() const;
    void displayOwnAccount() const;
    
    // Save, load, backup, restore
    bool saveToFile(const std::string& filename = "") const;
    bool loadFromFile(const std::string& filename = "");
    bool backupData() const;
    bool restoreFromBackup(const std::string& backupFilename);
    std::vector<std::string> listBackups() const;
    void rotateBackups(int keepCount = 5);
    void displayBackups() const;
    
    // Hiển thị quyền của loại tài khoản
    void displayPermissions(AccountType accountType) const;
};

#endif // ACCOUNT_MANAGER_H